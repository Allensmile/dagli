package com.linkedin.dagli.transformer;

/**
 * Common interface shared by all ConstantResultTransformationX types.
 *
 * @param <R> the type of result generated by the ConstantResultTransformation
 * @param <S> the type of ConstantResultTransformation
 */
public interface ConstantResultTransformation<R, S> {
  /**
   * Returns a copy of this transformer that will always have the specified constant result object for both new and
   * preparation data.  Note that this exact object will be returned every time the transformer is applied (and not a
   * clone).
   *
   * @param result the result that will always be returned by this transformer
   * @return a copy of this transformer that will always have the specified constant result
   */
  S withResult(R result);

  /**
   * Returns a copy of this transformer that will always have the specified constant result object for preparation data.
   * Note that this exact object will be returned every time the transformer is applied (and not a clone).
   *
   * @param result the result that will always be returned by this transformer for preparation data
   * @return a copy of this transformer that will always have the specified constant result
   */
  S withResultForPreparationData(R result);

  /**
   * Returns a copy of this transformer that will always have the specified constant result object for new data.
   * Note that this exact object will be returned every time the transformer is applied (and not a clone).
   *
   * @param result the result that will always be returned by this transformer for new data
   * @return a copy of this transformer that will always have the specified constant result
   */
  S withResultForNewData(R result);

  /**
   * @return the object instance that will be produced by this transformer for all new examples.
   */
  R getResultForNewData();

  /**
   * @return the object instance that will be produced by this transformer for all preparation examples.
   */
  R getResultForPreparationData();

  /**
   * Common interface for ConstantResultTransformationX.Prepared types.
   *
   * @param <R> the type of result generated by the ConstantResultTransformationX.Prepared
   * @param <S> the type of ConstantResultTransformationX.Prepared
   */
  interface Prepared<R, S> {
    /**
     * Returns a copy of this transformer that will always have the specified constant result object.  Note that this
     * exact result object will be returned every time the transformer is applied (and not a clone).
     *
     * @param result the result that will always be returned when applying the transformer
     * @return a copy of this transformer that will always have the specified constant result
     */
    S withResult(R result);

    /**
     * Gets the object instance that will be produced by this transformer for all inputs.
     *
     * @return the object instance that will be produced by this transformer for all inputs.
     */
    R getResult();
  }
}
