// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/internal/PreparedTransformerXInternalAPI.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer.internal;

import com.linkedin.dagli.dag.DAG;
import com.linkedin.dagli.placeholder.Placeholder;
import com.linkedin.dagli.producer.Producer;

import com.linkedin.dagli.transformer.PreparedTransformer10;

import com.linkedin.dagli.transformer.PreparedTransformer1;
import com.linkedin.dagli.tuple.Tuple9;
import com.linkedin.dagli.transformer.Value0FromTuple;
import com.linkedin.dagli.transformer.Value1FromTuple;
import com.linkedin.dagli.transformer.Value2FromTuple;
import com.linkedin.dagli.transformer.Value3FromTuple;
import com.linkedin.dagli.transformer.Value4FromTuple;
import com.linkedin.dagli.transformer.Value5FromTuple;
import com.linkedin.dagli.transformer.Value6FromTuple;
import com.linkedin.dagli.transformer.Value7FromTuple;
import com.linkedin.dagli.transformer.Value8FromTuple;

import java.util.List;
import com.linkedin.dagli.transformer.PreparedTransformer9;


public interface PreparedTransformer9InternalAPI<A, B, C, D, E, F, G, H, I, R, S extends PreparedTransformer9<A, B, C, D, E, F, G, H, I, R>>
    extends Transformer9InternalAPI<A, B, C, D, E, F, G, H, I, R, S>, PreparedTransformerInternalAPI<R, S> {

  R apply(Object executionCache, A value1, B value2, C value3, D value4, E value5, F value6, G value7, H value8,
      I value9);

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, Object[] values) {
    assert values.length >= 9;
    return apply(executionCache, (A) values[0], (B) values[1], (C) values[2], (D) values[3], (E) values[4],
        (F) values[5], (G) values[6], (H) values[7], (I) values[8]);
  }

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, List<?> values) {
    assert values.size() >= 9;
    return apply(executionCache, (A) values.get(0), (B) values.get(1), (C) values.get(2), (D) values.get(3),
        (E) values.get(4), (F) values.get(5), (G) values.get(6), (H) values.get(7), (I) values.get(8));
  }

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, Object[][] values, int exampleIndex) {
    assert values.length >= 9;
    return apply(executionCache, (A) values[0][exampleIndex], (B) values[1][exampleIndex], (C) values[2][exampleIndex],
        (D) values[3][exampleIndex], (E) values[4][exampleIndex], (F) values[5][exampleIndex],
        (G) values[6][exampleIndex], (H) values[7][exampleIndex], (I) values[8][exampleIndex]);
  }

  @Override
  default <J> PreparedTransformer10<A, B, C, D, E, F, G, H, I, J, R> withArity10(Producer<? extends J> newInput10) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    Placeholder<B> nestedPlaceholder2 = new Placeholder<>("Original Input 2");
    Placeholder<C> nestedPlaceholder3 = new Placeholder<>("Original Input 3");
    Placeholder<D> nestedPlaceholder4 = new Placeholder<>("Original Input 4");
    Placeholder<E> nestedPlaceholder5 = new Placeholder<>("Original Input 5");
    Placeholder<F> nestedPlaceholder6 = new Placeholder<>("Original Input 6");
    Placeholder<G> nestedPlaceholder7 = new Placeholder<>("Original Input 7");
    Placeholder<H> nestedPlaceholder8 = new Placeholder<>("Original Input 8");
    Placeholder<I> nestedPlaceholder9 = new Placeholder<>("Original Input 9");
    return DAG.Prepared
        .withPlaceholders(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4,
            nestedPlaceholder5, nestedPlaceholder6, nestedPlaceholder7, nestedPlaceholder8, nestedPlaceholder9,
            new Placeholder<J>("Ignored"))
        .withOutput(
            withInputs(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4,
                nestedPlaceholder5, nestedPlaceholder6, nestedPlaceholder7, nestedPlaceholder8, nestedPlaceholder9))
        .withInputs(getInput1(), getInput2(), getInput3(), getInput4(), getInput5(), getInput6(), getInput7(),
            getInput8(), getInput9(), newInput10);
  }

  @Override
  default <N> PreparedTransformer10<N, A, B, C, D, E, F, G, H, I, R> withPrependedArity10(
      Producer<? extends N> newInput1) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    Placeholder<B> nestedPlaceholder2 = new Placeholder<>("Original Input 2");
    Placeholder<C> nestedPlaceholder3 = new Placeholder<>("Original Input 3");
    Placeholder<D> nestedPlaceholder4 = new Placeholder<>("Original Input 4");
    Placeholder<E> nestedPlaceholder5 = new Placeholder<>("Original Input 5");
    Placeholder<F> nestedPlaceholder6 = new Placeholder<>("Original Input 6");
    Placeholder<G> nestedPlaceholder7 = new Placeholder<>("Original Input 7");
    Placeholder<H> nestedPlaceholder8 = new Placeholder<>("Original Input 8");
    Placeholder<I> nestedPlaceholder9 = new Placeholder<>("Original Input 9");
    return DAG.Prepared
        .withPlaceholders(new Placeholder<N>("Ignored"), nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3,
            nestedPlaceholder4, nestedPlaceholder5, nestedPlaceholder6, nestedPlaceholder7, nestedPlaceholder8,
            nestedPlaceholder9)
        .withOutput(
            this.withInputs(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4,
                nestedPlaceholder5, nestedPlaceholder6, nestedPlaceholder7, nestedPlaceholder8, nestedPlaceholder9))
        .withInputs(newInput1, getInput1(), getInput2(), getInput3(), getInput4(), getInput5(), getInput6(),
            getInput7(), getInput8(), getInput9());
  }

  @Override
  default PreparedTransformer1<Tuple9<? extends A, ? extends B, ? extends C, ? extends D, ? extends E, ? extends F, ? extends G, ? extends H, ? extends I>, R> withArity1(
      Producer<? extends Tuple9<? extends A, ? extends B, ? extends C, ? extends D, ? extends E, ? extends F, ? extends G, ? extends H, ? extends I>> inputTuple) {
    Placeholder<Tuple9<? extends A, ? extends B, ? extends C, ? extends D, ? extends E, ? extends F, ? extends G, ? extends H, ? extends I>> placeholderTuple =
        new Placeholder<>("Original Inputs Tuple");

    return DAG.Prepared
        .withPlaceholder(placeholderTuple)
        .withOutput(
            withInputs(new Value0FromTuple<>(placeholderTuple), new Value1FromTuple<>(placeholderTuple),
                new Value2FromTuple<>(placeholderTuple), new Value3FromTuple<>(placeholderTuple),
                new Value4FromTuple<>(placeholderTuple), new Value5FromTuple<>(placeholderTuple),
                new Value6FromTuple<>(placeholderTuple), new Value7FromTuple<>(placeholderTuple),
                new Value8FromTuple<>(placeholderTuple))).withInput(inputTuple);
  }
}
