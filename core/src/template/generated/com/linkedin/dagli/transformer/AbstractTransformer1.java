// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/AbstractTransformerX.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer;

import com.linkedin.dagli.annotation.equality.IgnoredByValueEquality;
import com.linkedin.dagli.transformer.internal.Transformer1InternalAPI;
import com.linkedin.dagli.producer.Producer;
import com.linkedin.dagli.producer.MissingInput;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;


@IgnoredByValueEquality
abstract class AbstractTransformer1<A, R, IF extends Transformer1InternalAPI<A, R, S>, S extends AbstractTransformer1<A, R, IF, S>>
    extends AbstractTransformer<R, IF, S> implements Transformer1<A, R> {

  private static final long serialVersionUID = 1;

  @Override
  protected List<Producer<?>> getInputList() {
    return Arrays.asList(getInput1());
  }

  protected Producer<? extends A> _input1;

  protected Producer<? extends A> getInput1() {
    return _input1;
  }

  public AbstractTransformer1() {
    this(MissingInput.get());
  }

  public AbstractTransformer1(Producer<? extends A> input1) {
    _input1 = Objects.requireNonNull(input1);
  }

  /**
   * Returns a copy of this instance that will accept the specified inputs.
   *
   * The returned copy <strong>must</strong> be a new instance, as Dagli may rely on this invariant.
   *
   * @param input1 the first input
   * @return a copy of this instance that will accept the specified inputs
   */
  protected S withAllInputs(Producer<? extends A> input1) {
    return clone(c -> {
      c._input1 = Objects.requireNonNull(input1);
    });
  }

  /**
   * Returns a copy of this instance that will accept the provided {@link Producer} as its first
   * input.
   *
   * @param input1 the input to use
   * @return a copy of this instance that will accept the specified input
   */
  protected S withInput1(Producer<? extends A> input1) {
    return clone(c -> c._input1 = Objects.requireNonNull(input1));
  }

  protected abstract class InternalAPI extends AbstractTransformer<R, IF, S>.InternalAPI implements
      Transformer1InternalAPI<A, R, S> {
    @Override
    public Producer<? extends A> getInput1() {
      return AbstractTransformer1.this.getInput1();
    }

    @Override
    public S withInputs(Producer<? extends A> input1) {
      return AbstractTransformer1.this.withAllInputs(input1);
    }

    @Override
    public List<Producer<?>> getInputList() {
      return AbstractTransformer1.this.getInputList();
    }
  }
}
