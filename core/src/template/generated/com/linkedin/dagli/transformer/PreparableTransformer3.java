// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/PreparableTransformerX.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer;

import com.linkedin.dagli.dag.SimpleDAGExecutor;
import com.linkedin.dagli.preparer.PreparerContext;
import com.linkedin.dagli.preparer.PreparerResultMixed;
import com.linkedin.dagli.transformer.internal.PreparableTransformer3InternalAPI;
import com.linkedin.dagli.util.collection.Iterables;


public interface PreparableTransformer3<A, B, C, R, N extends PreparedTransformer3<A, B, C, R>> extends
    Transformer3<A, B, C, R>, PreparableTransformer<R, N> {

  @Override
  PreparableTransformer3InternalAPI<A, B, C, R, N, ? extends PreparableTransformer3<A, B, C, R, N>> internalAPI();

  /**
   * Casts a preparable transformer to a "supertype".  This cast is safe due to the semantics of preparable
   * transformers.
   *
   * @param preparable the preparable transformer to cast
   * @param <A> the new type of input #1
   * @param <B> the new type of input #2
   * @param <C> the new type of input #3
   * @param <R> the new result type
   * @param <N> the new prepared transformer type
   * @return the provided {@code preparable}, cast to the desired "supertype"
   */
  @SuppressWarnings("unchecked")
  static <A, B, C, R, N extends PreparedTransformer3<A, B, C, R>> PreparableTransformer3<A, B, C, R, N> cast(
      PreparableTransformer3<? super A, ? super B, ? super C, ? extends R, ? extends N> preparable) {
    // safe due to semantics of preparable transformers:
    return (PreparableTransformer3<A, B, C, R, N>) preparable;
  }

  /**
   * Casts a preparable transformer to a "supertype" with an unknown type of prepared transformer.  This cast is safe
   * due to the semantics of preparable transformers.
   *
   * @param preparable the preparable transformer to cast
   * @param <A> the new type of input #1
   * @param <B> the new type of input #2
   * @param <C> the new type of input #3
   * @param <R> the new result type
   * @return the provided {@code preparable}, cast to the desired "supertype"
   */
  @SuppressWarnings("unchecked")
  static <A, B, C, R> PreparableTransformer3<A, B, C, R, PreparedTransformer3<A, B, C, R>> castWithGenericPrepared(
      PreparableTransformer3<? super A, ? super B, ? super C, ? extends R, ?> preparable) {
    // safe due to semantics of preparable transformers:
    return (PreparableTransformer3<A, B, C, R, PreparedTransformer3<A, B, C, R>>) preparable;
  }

  /**
   * Prepares a preparable transformer and returns the result (which includes the prepared transformer for both the
   * "preparation" data (in this case, the values passed to this method) and "new" data.
   *
   * @param preparable the transformer to prepare
   * @param values1 the values for the first input to the transformer for each example
   * @param values2 the values for the second input to the transformer for each example
   * @param values3 the values for the third input to the transformer for each example
   * @param <A> the type of the first input
   * @param <B> the type of the second input
   * @param <C> the type of the third input
   * @param <R> the type of the result of the prepared transformers
   * @param <N> the type of the prepared transformer ("for new data")
   * @return a {@link PreparerResultMixed} containing the prepared transformers for "preparation data" (the provided
   *         values)
   */
  @SuppressWarnings("unchecked")
  static <A, B, C, R, N extends PreparedTransformer3<A, B, C, R>> PreparerResultMixed<PreparedTransformer3<A, B, C, R>, N> prepare(
      PreparableTransformer3<A, B, C, R, N> preparable, Iterable<? extends A> values1, Iterable<? extends B> values2,
      Iterable<? extends C> values3) {
    return (PreparerResultMixed<PreparedTransformer3<A, B, C, R>, N>) preparable.internalAPI().prepare(
        PreparerContext.builder(Iterables.size64(values1)).setExecutor(new SimpleDAGExecutor()).build(), values1,
        values2, values3);
  }
}
