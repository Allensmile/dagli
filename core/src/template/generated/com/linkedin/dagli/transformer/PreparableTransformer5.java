// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/PreparableTransformerX.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer;

import com.linkedin.dagli.dag.DAG;
import com.linkedin.dagli.dag.DAG5x1;
import com.linkedin.dagli.dag.SimpleDAGExecutor;
import com.linkedin.dagli.preparer.PreparerContext;
import com.linkedin.dagli.preparer.PreparerResultMixed;
import com.linkedin.dagli.placeholder.Placeholder;
import com.linkedin.dagli.transformer.internal.PreparableTransformer5InternalAPI;
import com.linkedin.dagli.util.collection.Iterables;


public interface PreparableTransformer5<A, B, C, D, E, R, N extends PreparedTransformer5<A, B, C, D, E, R>> extends
    Transformer5<A, B, C, D, E, R>, PreparableTransformer<R, N> {

  @Override
  PreparableTransformer5InternalAPI<A, B, C, D, E, R, N, ? extends PreparableTransformer5<A, B, C, D, E, R, N>> internalAPI();

  /**
   * Casts a preparable transformer to a "supertype".  This cast is safe due to the semantics of preparable
   * transformers.
   *
   * @param preparable the preparable transformer to cast
   * @param <A> the new type of input #1
   * @param <B> the new type of input #2
   * @param <C> the new type of input #3
   * @param <D> the new type of input #4
   * @param <E> the new type of input #5
   * @param <R> the new result type
   * @param <N> the new prepared transformer type
   * @return the provided {@code preparable}, cast to the desired "supertype"
   */
  @SuppressWarnings("unchecked")
  static <A, B, C, D, E, R, N extends PreparedTransformer5<A, B, C, D, E, R>> PreparableTransformer5<A, B, C, D, E, R, N> cast(
      PreparableTransformer5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends R, ? extends N> preparable) {
    // safe due to semantics of preparable transformers:
    return (PreparableTransformer5<A, B, C, D, E, R, N>) preparable;
  }

  /**
   * Casts a preparable transformer to a "supertype" with an unknown type of prepared transformer.  This cast is safe
   * due to the semantics of preparable transformers.
   *
   * @param preparable the preparable transformer to cast
   * @param <A> the new type of input #1
   * @param <B> the new type of input #2
   * @param <C> the new type of input #3
   * @param <D> the new type of input #4
   * @param <E> the new type of input #5
   * @param <R> the new result type
   * @return the provided {@code preparable}, cast to the desired "supertype"
   */
  @SuppressWarnings("unchecked")
  static <A, B, C, D, E, R> PreparableTransformer5<A, B, C, D, E, R, PreparedTransformer5<A, B, C, D, E, R>> castWithGenericPrepared(
      PreparableTransformer5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends R, ?> preparable) {
    // safe due to semantics of preparable transformers:
    return (PreparableTransformer5<A, B, C, D, E, R, PreparedTransformer5<A, B, C, D, E, R>>) preparable;
  }

  /**
   * Prepares a preparable transformer and returns the result (which includes the prepared transformer for both the
   * "preparation" data (in this case, the values passed to this method) and "new" data.
   *
   * @param preparable the transformer to prepare
   * @param values1 the values for the first input to the transformer for each example
   * @param values2 the values for the second input to the transformer for each example
   * @param values3 the values for the third input to the transformer for each example
   * @param values4 the values for the fourth input to the transformer for each example
   * @param values5 the values for the fifth input to the transformer for each example
   * @param <A> the type of the first input
   * @param <B> the type of the second input
   * @param <C> the type of the third input
   * @param <D> the type of the fourth input
   * @param <E> the type of the fifth input
   * @param <R> the type of the result of the prepared transformers
   * @param <N> the type of the prepared transformer ("for new data")
   * @return a {@link PreparerResultMixed} containing the prepared transformers for "preparation data" (the provided
   *         values)
   */
  @SuppressWarnings("unchecked")
  static <A, B, C, D, E, R, N extends PreparedTransformer5<A, B, C, D, E, R>> PreparerResultMixed<PreparedTransformer5<A, B, C, D, E, R>, N> prepare(
      PreparableTransformer5<A, B, C, D, E, R, N> preparable, Iterable<? extends A> values1,
      Iterable<? extends B> values2, Iterable<? extends C> values3, Iterable<? extends D> values4,
      Iterable<? extends E> values5) {
    return (PreparerResultMixed<PreparedTransformer5<A, B, C, D, E, R>, N>) preparable.internalAPI().prepare(
        PreparerContext.builder(Iterables.size64(values1)).setExecutor(new SimpleDAGExecutor()).build(), values1,
        values2, values3, values4, values5);
  }

  /**
   * Creates a trivial DAG that wraps the provided transformer, with the DAG retaining the transformer's existing
   * inputs or, if the transformer is already a DAG, simply returns it unaltered.
   *
   * @param transformer the transformer to wrap
   * @param <A> the type of transformer input #1
   * @param <B> the type of transformer input #2
   * @param <C> the type of transformer input #3
   * @param <D> the type of transformer input #4
   * @param <E> the type of transformer input #5
   * @param <R> the type of result produced by the transformer
   * @return a trivial DAG that wraps the provided transformer, or the transformer itself if it is already a DAG
   */
  @SuppressWarnings("unchecked")
  static <A, B, C, D, E, R> DAG5x1<A, B, C, D, E, R> toDAG(PreparableTransformer5<A, B, C, D, E, R, ?> transformer) {
    if (transformer instanceof DAG5x1) {
      return (DAG5x1<A, B, C, D, E, R>) transformer;
    }

    Placeholder<A> placeholder1 = new Placeholder<>("Input #1");
    Placeholder<B> placeholder2 = new Placeholder<>("Input #2");
    Placeholder<C> placeholder3 = new Placeholder<>("Input #3");
    Placeholder<D> placeholder4 = new Placeholder<>("Input #4");
    Placeholder<E> placeholder5 = new Placeholder<>("Input #5");
    return DAG
        .withPlaceholders(placeholder1, placeholder2, placeholder3, placeholder4, placeholder5)
        .withNoReduction()
        .withOutput(
            transformer.internalAPI().withInputs(placeholder1, placeholder2, placeholder3, placeholder4, placeholder5))
        .withAllInputs(transformer.internalAPI().getInput1(), transformer.internalAPI().getInput2(),
            transformer.internalAPI().getInput3(), transformer.internalAPI().getInput4(),
            transformer.internalAPI().getInput5());
  }
}
