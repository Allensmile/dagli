// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/ValueXFromTuple.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import com.linkedin.dagli.annotation.equality.ValueEquality;
import com.linkedin.dagli.producer.Producer;
import com.linkedin.dagli.reducer.InverseClassReducer;
import com.linkedin.dagli.reducer.Reducer;
import com.linkedin.dagli.tuple.TupleValue3;


/**
 * Transformer that extracts the fourth element from a tuple.
 */
@ValueEquality
public class Value3FromTuple<D> extends
    AbstractPreparedTransformer1WithInput<TupleValue3<? extends D>, D, Value3FromTuple<D>> {
  private static final long serialVersionUID = 1;
  private static final List<InverseClassReducer> REDUCERS = Collections.singletonList(new InverseClassReducer(3,
      Tupled4.class, Tupled5.class, Tupled6.class, Tupled7.class, Tupled8.class, Tupled9.class, Tupled10.class));

  /**
   * Creates a new instance that will extract elements from the provided input tuple.
   *
   * @param input the producer providing tuples whose fourth element will be extracted
   */
  public Value3FromTuple(Producer<? extends TupleValue3<? extends D>> input) {
    super(input);
  }

  @Override
  protected Collection<? extends Reducer<? super Value3FromTuple<D>>> getGraphReducers() {
    return REDUCERS;
  }

  @Override
  public D apply(TupleValue3<? extends D> value) {
    return value.get3();
  }
}
