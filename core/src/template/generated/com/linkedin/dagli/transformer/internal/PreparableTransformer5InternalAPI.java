// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/internal/PreparableTransformerXInternalAPI.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer.internal;

import com.linkedin.dagli.objectio.ConcatenatedReader;
import com.linkedin.dagli.transformer.PreparableTransformer5;
import com.linkedin.dagli.transformer.PreparedTransformer5;
import com.linkedin.dagli.preparer.Preparer5;
import com.linkedin.dagli.preparer.PreparerContext;
import com.linkedin.dagli.preparer.PreparerResultMixed;
import com.linkedin.dagli.dag.DAGExecutor;
import java.util.Collection;
import com.linkedin.dagli.objectio.ObjectIterator;
import com.linkedin.dagli.objectio.ObjectReader;

import com.linkedin.dagli.dag.DAG;
import com.linkedin.dagli.placeholder.Placeholder;
import com.linkedin.dagli.producer.Producer;

import com.linkedin.dagli.transformer.PreparableTransformer1;
import com.linkedin.dagli.transformer.PreparedTransformer1;

import com.linkedin.dagli.transformer.PreparableTransformer6;
import com.linkedin.dagli.transformer.PreparedTransformer6;

import com.linkedin.dagli.tuple.Tuple5;
import com.linkedin.dagli.transformer.Value0FromTuple;
import com.linkedin.dagli.transformer.Value1FromTuple;
import com.linkedin.dagli.transformer.Value2FromTuple;
import com.linkedin.dagli.transformer.Value3FromTuple;
import com.linkedin.dagli.transformer.Value4FromTuple;


public interface PreparableTransformer5InternalAPI<A, B, C, D, E, R, N extends PreparedTransformer5<A, B, C, D, E, R>, S extends PreparableTransformer5<A, B, C, D, E, R, N>>
    extends Transformer5InternalAPI<A, B, C, D, E, R, S>, PreparableTransformerInternalAPI<R, N, S> {

  @Override
  Preparer5<A, B, C, D, E, R, N> getPreparer(PreparerContext context);

  default PreparerResultMixed<? extends PreparedTransformer5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends R>, N> prepare(
      PreparerContext context, Iterable<? extends A> values1, Iterable<? extends B> values2,
      Iterable<? extends C> values3, Iterable<? extends D> values4, Iterable<? extends E> values5) {
    Preparer5<A, B, C, D, E, R, N> preparer = getPreparer(context);

    try (ObjectIterator<? extends A> iter1 = ObjectIterator.wrap(values1.iterator());
        ObjectIterator<? extends B> iter2 = ObjectIterator.wrap(values2.iterator());
        ObjectIterator<? extends C> iter3 = ObjectIterator.wrap(values3.iterator());
        ObjectIterator<? extends D> iter4 = ObjectIterator.wrap(values4.iterator());
        ObjectIterator<? extends E> iter5 = ObjectIterator.wrap(values5.iterator())) {
      while (iter1.hasNext()) {
        preparer.process(iter1.next(), iter2.next(), iter3.next(), iter4.next(), iter5.next());
      }

      assert !iter2.hasNext();
      assert !iter3.hasNext();
      assert !iter4.hasNext();
      assert !iter5.hasNext();
    }

    return preparer.finishUnsafe(new ConcatenatedReader<>(Object[]::new, ObjectReader.wrap(values1), ObjectReader
        .wrap(values2), ObjectReader.wrap(values3), ObjectReader.wrap(values4), ObjectReader.wrap(values5)));
  }

  default PreparerResultMixed<? extends PreparedTransformer5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends R>, N> prepare(
      DAGExecutor executor, Collection<? extends A> values1, Collection<? extends B> values2,
      Collection<? extends C> values3, Collection<? extends D> values4, Collection<? extends E> values5) {
    return prepare(PreparerContext.builder(values1.size()).setExecutor(executor).build(), values1, values2, values3,
        values4, values5);
  }

  @Override
  default <F> PreparableTransformer6<A, B, C, D, E, F, R, ? extends PreparedTransformer6<A, B, C, D, E, F, R>> withArity6(
      Producer<? extends F> newInput6) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    Placeholder<B> nestedPlaceholder2 = new Placeholder<>("Original Input 2");
    Placeholder<C> nestedPlaceholder3 = new Placeholder<>("Original Input 3");
    Placeholder<D> nestedPlaceholder4 = new Placeholder<>("Original Input 4");
    Placeholder<E> nestedPlaceholder5 = new Placeholder<>("Original Input 5");
    return DAG
        .withPlaceholders(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4,
            nestedPlaceholder5, new Placeholder<F>("Ignored"))
        .withOutput(
            withInputs(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4,
                nestedPlaceholder5))
        .withInputs(getInput1(), getInput2(), getInput3(), getInput4(), getInput5(), newInput6);
  }

  @Override
  default <N> PreparableTransformer6<N, A, B, C, D, E, R, ? extends PreparedTransformer6<N, A, B, C, D, E, R>> withPrependedArity6(
      Producer<? extends N> newInput1) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    Placeholder<B> nestedPlaceholder2 = new Placeholder<>("Original Input 2");
    Placeholder<C> nestedPlaceholder3 = new Placeholder<>("Original Input 3");
    Placeholder<D> nestedPlaceholder4 = new Placeholder<>("Original Input 4");
    Placeholder<E> nestedPlaceholder5 = new Placeholder<>("Original Input 5");
    return DAG
        .withPlaceholders(new Placeholder<N>("Ignored"), nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3,
            nestedPlaceholder4, nestedPlaceholder5)
        .withOutput(
            this.withInputs(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4,
                nestedPlaceholder5))
        .withInputs(newInput1, getInput1(), getInput2(), getInput3(), getInput4(), getInput5());
  }

  @Override
  default PreparableTransformer1<Tuple5<? extends A, ? extends B, ? extends C, ? extends D, ? extends E>, R, ? extends PreparedTransformer1<Tuple5<? extends A, ? extends B, ? extends C, ? extends D, ? extends E>, R>> withArity1(
      Producer<? extends Tuple5<? extends A, ? extends B, ? extends C, ? extends D, ? extends E>> inputTuple) {
    Placeholder<Tuple5<? extends A, ? extends B, ? extends C, ? extends D, ? extends E>> placeholderTuple =
        new Placeholder<>("Original Inputs Tuple");

    return DAG
        .withPlaceholder(placeholderTuple)
        .withOutput(
            withInputs(new Value0FromTuple<>(placeholderTuple), new Value1FromTuple<>(placeholderTuple),
                new Value2FromTuple<>(placeholderTuple), new Value3FromTuple<>(placeholderTuple),
                new Value4FromTuple<>(placeholderTuple))).withInput(inputTuple);
  }
}
