// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/internal/PreparableTransformerXInternalAPI.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer.internal;

import com.linkedin.dagli.objectio.ConcatenatedReader;
import com.linkedin.dagli.transformer.PreparableTransformer2;
import com.linkedin.dagli.transformer.PreparedTransformer2;
import com.linkedin.dagli.preparer.Preparer2;
import com.linkedin.dagli.preparer.PreparerContext;
import com.linkedin.dagli.preparer.PreparerResultMixed;
import com.linkedin.dagli.dag.DAGExecutor;
import java.util.Collection;
import com.linkedin.dagli.objectio.ObjectIterator;
import com.linkedin.dagli.objectio.ObjectReader;

import com.linkedin.dagli.dag.DAG;
import com.linkedin.dagli.placeholder.Placeholder;
import com.linkedin.dagli.producer.Producer;

import com.linkedin.dagli.transformer.PreparableTransformer1;
import com.linkedin.dagli.transformer.PreparedTransformer1;

import com.linkedin.dagli.transformer.PreparableTransformer3;
import com.linkedin.dagli.transformer.PreparedTransformer3;

import com.linkedin.dagli.tuple.Tuple2;
import com.linkedin.dagli.transformer.Value0FromTuple;
import com.linkedin.dagli.transformer.Value1FromTuple;


public interface PreparableTransformer2InternalAPI<A, B, R, N extends PreparedTransformer2<A, B, R>, S extends PreparableTransformer2<A, B, R, N>>
    extends Transformer2InternalAPI<A, B, R, S>, PreparableTransformerInternalAPI<R, N, S> {

  @Override
  Preparer2<A, B, R, N> getPreparer(PreparerContext context);

  default PreparerResultMixed<? extends PreparedTransformer2<? super A, ? super B, ? extends R>, N> prepare(
      PreparerContext context, Iterable<? extends A> values1, Iterable<? extends B> values2) {
    Preparer2<A, B, R, N> preparer = getPreparer(context);

    try (ObjectIterator<? extends A> iter1 = ObjectIterator.wrap(values1.iterator());
        ObjectIterator<? extends B> iter2 = ObjectIterator.wrap(values2.iterator())) {
      while (iter1.hasNext()) {
        preparer.process(iter1.next(), iter2.next());
      }

      assert !iter2.hasNext();
    }

    return preparer.finishUnsafe(new ConcatenatedReader<>(Object[]::new, ObjectReader.wrap(values1), ObjectReader
        .wrap(values2)));
  }

  default PreparerResultMixed<? extends PreparedTransformer2<? super A, ? super B, ? extends R>, N> prepare(
      DAGExecutor executor, Collection<? extends A> values1, Collection<? extends B> values2) {
    return prepare(PreparerContext.builder(values1.size()).setExecutor(executor).build(), values1, values2);
  }

  @Override
  default <C> PreparableTransformer3<A, B, C, R, ? extends PreparedTransformer3<A, B, C, R>> withArity3(
      Producer<? extends C> newInput3) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    Placeholder<B> nestedPlaceholder2 = new Placeholder<>("Original Input 2");
    return DAG.withPlaceholders(nestedPlaceholder1, nestedPlaceholder2, new Placeholder<C>("Ignored"))
        .withOutput(withInputs(nestedPlaceholder1, nestedPlaceholder2)).withInputs(getInput1(), getInput2(), newInput3);
  }

  @Override
  default <N> PreparableTransformer3<N, A, B, R, ? extends PreparedTransformer3<N, A, B, R>> withPrependedArity3(
      Producer<? extends N> newInput1) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    Placeholder<B> nestedPlaceholder2 = new Placeholder<>("Original Input 2");
    return DAG.withPlaceholders(new Placeholder<N>("Ignored"), nestedPlaceholder1, nestedPlaceholder2)
        .withOutput(this.withInputs(nestedPlaceholder1, nestedPlaceholder2))
        .withInputs(newInput1, getInput1(), getInput2());
  }

  @Override
  default PreparableTransformer1<Tuple2<? extends A, ? extends B>, R, ? extends PreparedTransformer1<Tuple2<? extends A, ? extends B>, R>> withArity1(
      Producer<? extends Tuple2<? extends A, ? extends B>> inputTuple) {
    Placeholder<Tuple2<? extends A, ? extends B>> placeholderTuple = new Placeholder<>("Original Inputs Tuple");

    return DAG.withPlaceholder(placeholderTuple)
        .withOutput(withInputs(new Value0FromTuple<>(placeholderTuple), new Value1FromTuple<>(placeholderTuple)))
        .withInput(inputTuple);
  }
}
