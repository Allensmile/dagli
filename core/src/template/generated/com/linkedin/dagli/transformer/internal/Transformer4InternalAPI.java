// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/internal/TransformerXInternalAPI.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer.internal;

import com.linkedin.dagli.transformer.Transformer4;
import com.linkedin.dagli.producer.Producer;
import com.linkedin.dagli.transformer.Transformer1;
import com.linkedin.dagli.tuple.Tuple4;
import com.linkedin.dagli.transformer.Transformer5;
import java.util.List;


public interface Transformer4InternalAPI<A, B, C, D, R, S extends Transformer4<A, B, C, D, R>> extends
    TransformerInternalAPI<R, S> {

  @Override
  @SuppressWarnings("unchecked")
  default S withInputsUnsafe(List<? extends Producer<?>> newInputs) {
    return withInputs((Producer<? extends A>) newInputs.get(0), (Producer<? extends B>) newInputs.get(1),
        (Producer<? extends C>) newInputs.get(2), (Producer<? extends D>) newInputs.get(3));
  }

  Producer<? extends A> getInput1();

  Producer<? extends B> getInput2();

  Producer<? extends C> getInput3();

  Producer<? extends D> getInput4();

  S withInputs(Producer<? extends A> input1, Producer<? extends B> input2, Producer<? extends C> input3,
      Producer<? extends D> input4);

  <E> Transformer5<A, B, C, D, E, R> withArity5(Producer<? extends E> newInput5);

  <N> Transformer5<N, A, B, C, D, R> withPrependedArity5(Producer<? extends N> newInput1);

  Transformer1<Tuple4<? extends A, ? extends B, ? extends C, ? extends D>, R> withArity1(
      Producer<? extends Tuple4<? extends A, ? extends B, ? extends C, ? extends D>> inputTuple);
}
