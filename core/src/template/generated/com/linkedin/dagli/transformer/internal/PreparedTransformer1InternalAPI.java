// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/internal/PreparedTransformerXInternalAPI.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer.internal;

import com.linkedin.dagli.dag.DAG;
import com.linkedin.dagli.placeholder.Placeholder;
import com.linkedin.dagli.producer.Producer;

import com.linkedin.dagli.transformer.PreparedTransformer2;

import java.util.List;
import com.linkedin.dagli.transformer.PreparedTransformer1;


public interface PreparedTransformer1InternalAPI<A, R, S extends PreparedTransformer1<A, R>> extends
    Transformer1InternalAPI<A, R, S>, PreparedTransformerInternalAPI<R, S> {

  R apply(Object executionCache, A value1);

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, Object[] values) {
    assert values.length >= 1;
    return apply(executionCache, (A) values[0]);
  }

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, List<?> values) {
    assert values.size() >= 1;
    return apply(executionCache, (A) values.get(0));
  }

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, Object[][] values, int exampleIndex) {
    assert values.length >= 1;
    return apply(executionCache, (A) values[0][exampleIndex]);
  }

  @Override
  default <B> PreparedTransformer2<A, B, R> withArity2(Producer<? extends B> newInput2) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    return DAG.Prepared.withPlaceholders(nestedPlaceholder1, new Placeholder<B>("Ignored"))
        .withOutput(withInputs(nestedPlaceholder1)).withInputs(getInput1(), newInput2);
  }

  @Override
  default <N> PreparedTransformer2<N, A, R> withPrependedArity2(Producer<? extends N> newInput1) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    return DAG.Prepared.withPlaceholders(new Placeholder<N>("Ignored"), nestedPlaceholder1)
        .withOutput(this.withInputs(nestedPlaceholder1)).withInputs(newInput1, getInput1());
  }
}
