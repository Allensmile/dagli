// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the transformer/internal/PreparedTransformerXInternalAPI.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.transformer.internal;

import com.linkedin.dagli.dag.DAG;
import com.linkedin.dagli.placeholder.Placeholder;
import com.linkedin.dagli.producer.Producer;

import com.linkedin.dagli.transformer.PreparedTransformer5;

import com.linkedin.dagli.transformer.PreparedTransformer1;
import com.linkedin.dagli.tuple.Tuple4;
import com.linkedin.dagli.transformer.Value0FromTuple;
import com.linkedin.dagli.transformer.Value1FromTuple;
import com.linkedin.dagli.transformer.Value2FromTuple;
import com.linkedin.dagli.transformer.Value3FromTuple;

import java.util.List;
import com.linkedin.dagli.transformer.PreparedTransformer4;


public interface PreparedTransformer4InternalAPI<A, B, C, D, R, S extends PreparedTransformer4<A, B, C, D, R>> extends
    Transformer4InternalAPI<A, B, C, D, R, S>, PreparedTransformerInternalAPI<R, S> {

  R apply(Object executionCache, A value1, B value2, C value3, D value4);

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, Object[] values) {
    assert values.length >= 4;
    return apply(executionCache, (A) values[0], (B) values[1], (C) values[2], (D) values[3]);
  }

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, List<?> values) {
    assert values.size() >= 4;
    return apply(executionCache, (A) values.get(0), (B) values.get(1), (C) values.get(2), (D) values.get(3));
  }

  @Override
  @SuppressWarnings("unchecked")
  default R applyUnsafe(Object executionCache, Object[][] values, int exampleIndex) {
    assert values.length >= 4;
    return apply(executionCache, (A) values[0][exampleIndex], (B) values[1][exampleIndex], (C) values[2][exampleIndex],
        (D) values[3][exampleIndex]);
  }

  @Override
  default <E> PreparedTransformer5<A, B, C, D, E, R> withArity5(Producer<? extends E> newInput5) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    Placeholder<B> nestedPlaceholder2 = new Placeholder<>("Original Input 2");
    Placeholder<C> nestedPlaceholder3 = new Placeholder<>("Original Input 3");
    Placeholder<D> nestedPlaceholder4 = new Placeholder<>("Original Input 4");
    return DAG.Prepared
        .withPlaceholders(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4,
            new Placeholder<E>("Ignored"))
        .withOutput(withInputs(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4))
        .withInputs(getInput1(), getInput2(), getInput3(), getInput4(), newInput5);
  }

  @Override
  default <N> PreparedTransformer5<N, A, B, C, D, R> withPrependedArity5(Producer<? extends N> newInput1) {
    Placeholder<A> nestedPlaceholder1 = new Placeholder<>("Original Input 1");
    Placeholder<B> nestedPlaceholder2 = new Placeholder<>("Original Input 2");
    Placeholder<C> nestedPlaceholder3 = new Placeholder<>("Original Input 3");
    Placeholder<D> nestedPlaceholder4 = new Placeholder<>("Original Input 4");
    return DAG.Prepared
        .withPlaceholders(new Placeholder<N>("Ignored"), nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3,
            nestedPlaceholder4)
        .withOutput(this.withInputs(nestedPlaceholder1, nestedPlaceholder2, nestedPlaceholder3, nestedPlaceholder4))
        .withInputs(newInput1, getInput1(), getInput2(), getInput3(), getInput4());
  }

  @Override
  default PreparedTransformer1<Tuple4<? extends A, ? extends B, ? extends C, ? extends D>, R> withArity1(
      Producer<? extends Tuple4<? extends A, ? extends B, ? extends C, ? extends D>> inputTuple) {
    Placeholder<Tuple4<? extends A, ? extends B, ? extends C, ? extends D>> placeholderTuple =
        new Placeholder<>("Original Inputs Tuple");

    return DAG.Prepared
        .withPlaceholder(placeholderTuple)
        .withOutput(
            withInputs(new Value0FromTuple<>(placeholderTuple), new Value1FromTuple<>(placeholderTuple),
                new Value2FromTuple<>(placeholderTuple), new Value3FromTuple<>(placeholderTuple)))
        .withInput(inputTuple);
  }
}
