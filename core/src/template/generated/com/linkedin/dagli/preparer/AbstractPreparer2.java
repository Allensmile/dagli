// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the preparer/AbstractPreparerX.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.preparer;

import com.linkedin.dagli.transformer.PreparedTransformer2;
import com.linkedin.dagli.objectio.ObjectReader;


/**
 * A common abstract base class that {@link Preparer}s prepared using an {@link PreparerMode} not known at compile-time
 * are highly encouraged to extend.  If a {@link Preparer} always uses the {@link PreparerMode#BATCH} or
 * {@link PreparerMode#STREAM} modes, it should derive from {@link AbstractBatchPreparer2} or
 * {@link AbstractStreamPreparer2} instead.
 *
 * Besides simplifying the code and improving readability, using the Dagli-provided base class helps insulate the
 * derived class's implementation from future changes in the Dagli Framework.
 *
 * @param <A> the type of the first input
 * @param <B> the type of the second input
 * @param <R> result type of the transformer prepared by this preparer
 * @param <N> the type of {@link com.linkedin.dagli.transformer.PreparedTransformer} prepared by this preparer
 */
public abstract class AbstractPreparer2<A, B, R, N extends PreparedTransformer2<A, B, R>> extends
    AbstractPreparer<R, N> implements Preparer2<A, B, R, N> {

  @Override
  public final void processUnsafe(Object[] values) {
    Preparer2.super.processUnsafe(values);
  }

  @Override
  public final PreparerResultMixed<? extends PreparedTransformer2<? super A, ? super B, ? extends R>, N> finishUnsafe(
      ObjectReader<Object[]> inputs) {
    return Preparer2.super.finishUnsafe(inputs);
  }
}
