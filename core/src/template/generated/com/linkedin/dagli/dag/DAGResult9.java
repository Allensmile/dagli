// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the dag/DAGResultX.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.dag;

import com.linkedin.dagli.objectio.ObjectReader;
import com.linkedin.dagli.tuple.Tuple9;


/**
 * Interface for obtaining the results of executing a DAG.  As a DAG may have multiple <i>output nodes</i>, whose result
 * values are the "outputs" of the DAG.  These may be retrieved together (as a tuple) directly from this interface
 * (which extends {@link ObjectReader}), or individually via the getResultX() methods.
 *
 * The ordering of the outputs is determined when the DAG is created, matching the order of the outputs passed in the
 * DAG.withPlaceholders(...).withOutputs(...) call.
 *
 * @param <RA> the type of result #1 of the DAG
 * @param <RB> the type of result #2 of the DAG
 * @param <RC> the type of result #3 of the DAG
 * @param <RD> the type of result #4 of the DAG
 * @param <RE> the type of result #5 of the DAG
 * @param <RF> the type of result #6 of the DAG
 * @param <RG> the type of result #7 of the DAG
 * @param <RH> the type of result #8 of the DAG
 * @param <RI> the type of result #9 of the DAG
 */
public interface DAGResult9<RA, RB, RC, RD, RE, RF, RG, RH, RI> extends
    ObjectReader<Tuple9<RA, RB, RC, RD, RE, RF, RG, RH, RI>> {
  /**
   * Gets the results produced by the first output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the first output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RA> getResult1();

  /**
   * Gets the results produced by the second output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the second output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RB> getResult2();

  /**
   * Gets the results produced by the third output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the third output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RC> getResult3();

  /**
   * Gets the results produced by the fourth output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the fourth output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RD> getResult4();

  /**
   * Gets the results produced by the fifth output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the fifth output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RE> getResult5();

  /**
   * Gets the results produced by the sixth output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the sixth output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RF> getResult6();

  /**
   * Gets the results produced by the seventh output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the seventh output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RG> getResult7();

  /**
   * Gets the results produced by the eighth output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the eighth output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RH> getResult8();

  /**
   * Gets the results produced by the ninth output node of the DAG as an {@link ObjectReader}.  This
   * {@link ObjectReader} is parallel to the examples inputted to the DAG: that is, the ith value of the
   * {@link ObjectReader} corresponds to the ith example.  The size of the {@link ObjectReader} will (of course) also
   * equal the number of examples.
   *
   * @return the values produced by the ninth output node of the DAG for the inputted examples
   */
  public abstract ObjectReader<RI> getResult9();
}
