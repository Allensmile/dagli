// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the dag/AbstractDAGResultX.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.dag;

import com.linkedin.dagli.objectio.ObjectReader;
import com.linkedin.dagli.objectio.WrappedObjectReader;
import java.util.Objects;
import com.linkedin.dagli.tuple.Tuple3;
import com.linkedin.dagli.objectio.tuple.TupleReader;


/**
 * Base class for an object encapsulating the results of executing a DAG.
 *
 * @param <RA> the type of result #1 of the DAG
 * @param <RB> the type of result #2 of the DAG
 * @param <RC> the type of result #3 of the DAG
 */
abstract class AbstractDAGResult3<RA, RB, RC> extends WrappedObjectReader<Tuple3<RA, RB, RC>> implements
    DAGResult3<RA, RB, RC>, AutoCloseable {
  private final ObjectReader<RA> _result1;
  private final ObjectReader<RB> _result2;
  private final ObjectReader<RC> _result3;

  @Override
  public ObjectReader<RA> getResult1() {
    return _result1;
  }

  @Override
  public ObjectReader<RB> getResult2() {
    return _result2;
  }

  @Override
  public ObjectReader<RC> getResult3() {
    return _result3;
  }

  /**
   * Create a new DAG result instance from the provided array of {@link ObjectReader}s.
   *
   * @param results an array of length 3 providing an {@link ObjectReader} for each of the DAG's outputs.
   */
  @SuppressWarnings("unchecked")
  AbstractDAGResult3(ObjectReader<?>[] results) {
    this((ObjectReader<RA>) results[0], (ObjectReader<RB>) results[1], (ObjectReader<RC>) results[2]);
    assert results.length == 3;
  }

  /**
   * Create a new DAG result instance from the provided {@link ObjectReader}s.
   *
   * @param results1 an {@link ObjectReader} for the DAG's first output.
   * @param results2 an {@link ObjectReader} for the DAG's second output.
   * @param results3 an {@link ObjectReader} for the DAG's third output.
   */
  AbstractDAGResult3(ObjectReader<RA> results1, ObjectReader<RB> results2, ObjectReader<RC> results3) {
    super(new TupleReader<>(results1, results2, results3));

    _result1 = Objects.requireNonNull(results1);
    _result2 = Objects.requireNonNull(results2);
    _result3 = Objects.requireNonNull(results3);
  }

  @Override
  public void close() {
    _result1.close();
    _result2.close();
    _result3.close();
  }
}
