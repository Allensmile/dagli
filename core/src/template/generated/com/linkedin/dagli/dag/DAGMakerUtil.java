// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the dag/DAGMakerUtil.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.dag;

import com.linkedin.dagli.producer.MissingInput;


/**
 * Internal Dagli utility class for creating the appropriate DAGXxY instance (once with the appropriate input arity X
 * and appropriate result arity Y) for a given DAGStructure.
 */
final class DAGMakerUtil {
  private DAGMakerUtil() {
  }

  /**
   * Creates a DAGXxY instance with the appropriate input arity X and appropriate for the provided graph.
   * @param dag the graph from which to create the DAGXxY instance
   * @param <R> the result tuple type of the graph (e.g. String, Tuple2<String, Integer>, Tuple3<...>, ...)
   * @return a DAGXxY instance with the appropriate input arity X and appropriate for the provided graph
   */
  static <R> PreparableDAGTransformer<R, ?, ?> makePreparableDAGTransformer(DAGStructure<R> dag) {
    switch (dag.getInputArity()) {
      case 1:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG1x1(dag, MissingInput.get());
          case 2:
            return new DAG1x2(dag, MissingInput.get());
          case 3:
            return new DAG1x3(dag, MissingInput.get());
          case 4:
            return new DAG1x4(dag, MissingInput.get());
          case 5:
            return new DAG1x5(dag, MissingInput.get());
          case 6:
            return new DAG1x6(dag, MissingInput.get());
          case 7:
            return new DAG1x7(dag, MissingInput.get());
          case 8:
            return new DAG1x8(dag, MissingInput.get());
          case 9:
            return new DAG1x9(dag, MissingInput.get());
          case 10:
            return new DAG1x10(dag, MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 2:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG2x1(dag, MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG2x2(dag, MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG2x3(dag, MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG2x4(dag, MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG2x5(dag, MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG2x6(dag, MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG2x7(dag, MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG2x8(dag, MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG2x9(dag, MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG2x10(dag, MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 3:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG3x1(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG3x2(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG3x3(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG3x4(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG3x5(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG3x6(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG3x7(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG3x8(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG3x9(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG3x10(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 4:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG4x1(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG4x2(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG4x3(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG4x4(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG4x5(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG4x6(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG4x7(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG4x8(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG4x9(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG4x10(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 5:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG5x1(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 2:
            return new DAG5x2(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 3:
            return new DAG5x3(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 4:
            return new DAG5x4(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 5:
            return new DAG5x5(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 6:
            return new DAG5x6(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 7:
            return new DAG5x7(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 8:
            return new DAG5x8(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 9:
            return new DAG5x9(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 10:
            return new DAG5x10(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 6:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG6x1(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG6x2(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG6x3(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG6x4(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG6x5(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG6x6(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG6x7(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG6x8(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG6x9(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG6x10(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 7:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG7x1(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG7x2(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG7x3(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG7x4(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG7x5(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG7x6(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG7x7(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG7x8(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG7x9(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG7x10(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 8:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG8x1(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG8x2(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG8x3(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG8x4(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG8x5(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG8x6(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG8x7(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG8x8(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG8x9(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG8x10(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 9:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG9x1(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG9x2(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG9x3(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG9x4(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG9x5(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG9x6(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG9x7(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG9x8(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG9x9(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG9x10(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 10:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG10x1(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 2:
            return new DAG10x2(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 3:
            return new DAG10x3(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 4:
            return new DAG10x4(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 5:
            return new DAG10x5(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 6:
            return new DAG10x6(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 7:
            return new DAG10x7(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 8:
            return new DAG10x8(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 9:
            return new DAG10x9(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 10:
            return new DAG10x10(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      default:
        throw new UnsupportedOperationException("Unsupported placeholder arity");
    }
  }

  /**
   * Creates a DAGXxY.Prepared instance with the appropriate input arity X and appropriate for the provided graph.
   * @param dag the graph from which to create the DAGXxY.Prepared instance
   * @param <R> the result tuple type of the graph (e.g. String, Tuple2<String, Integer>, Tuple3<...>, ...)
   * @return a DAGXxY.Prepared instance with the appropriate input arity X and appropriate for the provided graph
   */
  static <R> PreparedDAGTransformer<R, ?> makePreparedDAGTransformer(DAGStructure<R> dag) {
    switch (dag.getInputArity()) {
      case 1:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG1x1.Prepared(dag, MissingInput.get());
          case 2:
            return new DAG1x2.Prepared(dag, MissingInput.get());
          case 3:
            return new DAG1x3.Prepared(dag, MissingInput.get());
          case 4:
            return new DAG1x4.Prepared(dag, MissingInput.get());
          case 5:
            return new DAG1x5.Prepared(dag, MissingInput.get());
          case 6:
            return new DAG1x6.Prepared(dag, MissingInput.get());
          case 7:
            return new DAG1x7.Prepared(dag, MissingInput.get());
          case 8:
            return new DAG1x8.Prepared(dag, MissingInput.get());
          case 9:
            return new DAG1x9.Prepared(dag, MissingInput.get());
          case 10:
            return new DAG1x10.Prepared(dag, MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 2:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG2x1.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG2x2.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG2x3.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG2x4.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG2x5.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG2x6.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG2x7.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG2x8.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG2x9.Prepared(dag, MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG2x10.Prepared(dag, MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 3:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG3x1.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG3x2.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG3x3.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG3x4.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG3x5.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG3x6.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG3x7.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG3x8.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG3x9.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG3x10.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 4:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG4x1.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 2:
            return new DAG4x2.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 3:
            return new DAG4x3.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 4:
            return new DAG4x4.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 5:
            return new DAG4x5.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 6:
            return new DAG4x6.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 7:
            return new DAG4x7.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 8:
            return new DAG4x8.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 9:
            return new DAG4x9.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 10:
            return new DAG4x10.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 5:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG5x1.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG5x2.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG5x3.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG5x4.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG5x5.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG5x6.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG5x7.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG5x8.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG5x9.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG5x10.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 6:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG6x1.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG6x2.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG6x3.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG6x4.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG6x5.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG6x6.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG6x7.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG6x8.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG6x9.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG6x10.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 7:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG7x1.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG7x2.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG7x3.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG7x4.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG7x5.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG7x6.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG7x7.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG7x8.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG7x9.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG7x10.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 8:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG8x1.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG8x2.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG8x3.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG8x4.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG8x5.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG8x6.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG8x7.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG8x8.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG8x9.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG8x10.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 9:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG9x1.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 2:
            return new DAG9x2.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 3:
            return new DAG9x3.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 4:
            return new DAG9x4.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 5:
            return new DAG9x5.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 6:
            return new DAG9x6.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 7:
            return new DAG9x7.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 8:
            return new DAG9x8.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 9:
            return new DAG9x9.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          case 10:
            return new DAG9x10.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      case 10:
        switch (dag.getOutputArity()) {
          case 1:
            return new DAG10x1.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 2:
            return new DAG10x2.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 3:
            return new DAG10x3.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 4:
            return new DAG10x4.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 5:
            return new DAG10x5.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 6:
            return new DAG10x6.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 7:
            return new DAG10x7.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 8:
            return new DAG10x8.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 9:
            return new DAG10x9.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          case 10:
            return new DAG10x10.Prepared(dag, MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(), MissingInput.get(),
                MissingInput.get(), MissingInput.get());
          default:
            throw new UnsupportedOperationException("Unsupported output arity");
        }
      default:
        throw new UnsupportedOperationException("Unsupported placeholder arity");
    }
  }
}
