<#import "../common.ftl" as c />
<@c.AutoGeneratedWarning />
package com.linkedin.dagli.transformer;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import com.linkedin.dagli.annotation.equality.ValueEquality;
import com.linkedin.dagli.producer.Producer;
import com.linkedin.dagli.reducer.InverseClassReducer;
import com.linkedin.dagli.reducer.Reducer;
import com.linkedin.dagli.tuple.TupleValue${arity-1};

<#macro ValueFromTupleClass>Value${arity-1}FromTuple<${c.InputGenericArgument(arity)}></#macro>

/**
 * Transformer that extracts the ${c.positionNames[arity]} element from a tuple.
 */
@ValueEquality
public class <@ValueFromTupleClass /> extends AbstractPreparedTransformer1WithInput<TupleValue${arity-1}<? extends ${c.InputGenericArgument(arity)}>, ${c.InputGenericArgument(arity)}, Value${arity-1}FromTuple<${c.InputGenericArgument(arity)}>> {
  private static final long serialVersionUID = 1;
  private static final List<InverseClassReducer> REDUCERS = Collections.singletonList(new InverseClassReducer(${arity-1}, <#list arity..c.maxArity as index>Tupled${index}.class<#sep>, </#list>));

  /**
   * Creates a new instance that will extract elements from the provided input tuple.
   *
   * @param input the producer providing tuples whose ${c.positionNames[arity]} element will be extracted
   */
  public Value${arity-1}FromTuple(Producer<? extends TupleValue${arity-1}<? extends ${c.InputGenericArgument(arity)}>> input) {
    super(input);
  }

  @Override
  protected Collection<? extends Reducer<? super <@ValueFromTupleClass />>> getGraphReducers() {
    return REDUCERS;
  }

  @Override
  public ${c.InputGenericArgument(arity)} apply(TupleValue${arity-1}<? extends ${c.InputGenericArgument(arity)}> value) {
    return value.get${arity-1}();
  }
}
