<#import "../../common.ftl" as c />
<@c.AutoGeneratedWarning />
package com.linkedin.dagli.transformer.internal;

import com.linkedin.dagli.transformer.Transformer${arity};
import com.linkedin.dagli.producer.Producer;
<#if (arity > 1)>
import com.linkedin.dagli.transformer.Transformer1;
import com.linkedin.dagli.tuple.Tuple${arity};
</#if>
<#if (arity < c.maxArity)>
import com.linkedin.dagli.transformer.Transformer${arity+1};
</#if>
import java.util.List;

<#assign subclass>S extends <@c.Transformer arity /></#assign>
public interface <@c.TransformerInternalAPI arity subclass /> extends TransformerInternalAPI<R, S> {

  @Override
  @SuppressWarnings("unchecked")
  default S withInputsUnsafe(List<? extends Producer<?>> newInputs) {
    return withInputs(<#list 1..arity as index>(Producer<? extends ${c.InputGenericArgument(index)}>) newInputs.get(${index - 1})<#sep>, </#list>);
  }

  <#list 1..arity as index>
  Producer<? extends ${c.InputGenericArgument(index)}> getInput${c.InputSuffix(index)}();
  </#list>

  <#-- withInputs is the standard name even if arity is 1 -->
  S withInputs(<@c.InputProducerList arity />);

<#if arity < c.maxArity>
  <${c.InputGenericArgument(arity + 1)}> <@c.Transformer arity + 1 /> withArity${arity + 1}(Producer<? extends ${c.InputGenericArgument(arity + 1)}> newInput${c.InputSuffix(arity + 1)});

  <N> Transformer${arity + 1}<N, <@c.InputGenericArguments arity />, R> withPrependedArity${arity + 1}(Producer<? extends N> newInput${c.InputSuffix(1)});
</#if>
<#if (arity > 1)>
  Transformer1<<@c.ValueTupleType arity />, R> withArity1(Producer<? extends <@c.ValueTupleType arity />> inputTuple);
</#if>
}
