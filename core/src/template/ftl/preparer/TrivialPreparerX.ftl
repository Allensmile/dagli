<#import "../common.ftl" as c />
<@c.AutoGeneratedWarning />
package com.linkedin.dagli.preparer;

import com.linkedin.dagli.transformer.PreparedTransformer${arity};

<#assign preparedType>N extends <@c.PreparedTransformer arity /></#assign>
/**
 * Trivial "preparer" that simply returns a provided, prepared transformer of arity ${arity}.
 * @param <R> the type of result produced by the prepared transformer.
 * @param <N> the type of prepared transformer that will be returned
 */
public class <@c.TrivialPreparer arity preparedType /> extends <@c.AbstractStreamPreparer arity "N" /> {
  private final N _preparedForNewData;
  private final <@c.LoosePreparedTransformer arity /> _preparedForPreparationData;

  /**
   * Creates a new instance that will "prepare" the provided transformer.
   *
   * @param prepared the transformer which will result from this preparer.
   */
  public TrivialPreparer${arity}(N prepared) {
    this(prepared, prepared);
  }

/**
   * Creates a new instance that will "prepare" the provided transformers.
   *
   * @param preparedForPreparationData the transformer to be used for preparation data
   * @param preparedForNewData the transformer to be used for new data
   */
  public TrivialPreparer${arity}(<@c.LoosePreparedTransformer arity /> preparedForPreparationData,
      N preparedForNewData) {
    _preparedForNewData = preparedForNewData;
    _preparedForPreparationData = preparedForPreparationData;
  }

  @Override
  public PreparerResultMixed<? extends <@c.LoosePreparedTransformer arity />, N> finish() {
    return new PreparerResultMixed<>(_preparedForPreparationData, _preparedForNewData);
  }

  @Override
  public void process(<@c.InputValueList arity />) { }
}
