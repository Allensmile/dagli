<#import "../common.ftl" as c />
<@c.AutoGeneratedWarning />
package com.linkedin.dagli.preparer;

import com.linkedin.dagli.transformer.PreparedTransformer${arity};
import com.linkedin.dagli.objectio.ObjectReader;

<#assign preparedType>N extends <@c.PreparedTransformer arity /></#assign>

/**
 * A common abstract base class that {@link Preparer}s prepared using an {@link PreparerMode} not known at compile-time
 * are highly encouraged to extend.  If a {@link Preparer} always uses the {@link PreparerMode#BATCH} or
 * {@link PreparerMode#STREAM} modes, it should derive from {@link AbstractBatchPreparer${arity}} or
 * {@link AbstractStreamPreparer${arity}} instead.
 *
 * Besides simplifying the code and improving readability, using the Dagli-provided base class helps insulate the
 * derived class's implementation from future changes in the Dagli Framework.
 *
 <@c.GenericInputTypesJavadoc arity />
 * @param <R> result type of the transformer prepared by this preparer
 * @param <N> the type of {@link com.linkedin.dagli.transformer.PreparedTransformer} prepared by this preparer
 */
public abstract class AbstractPreparer${arity}<<@c.InputGenericArguments arity />, R, ${preparedType}>
  extends AbstractPreparer<R, N> implements <@c.Preparer arity "N" /> {

  @Override
  public final void processUnsafe(Object[] values) {
    Preparer${arity}.super.processUnsafe(values);
  }

  @Override
  public final PreparerResultMixed<? extends <@c.LoosePreparedTransformer arity />, N> finishUnsafe(ObjectReader<Object[]> inputs) {
    return Preparer${arity}.super.finishUnsafe(inputs);
  }
}