<#import "../../common.ftl" as c />
<#import "common.ftl" as f />
<@c.AutoGeneratedWarning />
package com.linkedin.dagli.util.function;

import com.linkedin.dagli.util.named.Named;
import java.util.Objects;

<#-- the class name of the function interface we're going to define -->
<#macro NakedFunctionName>${f.Prefix(typeIndex)}Function${arity}</#macro>
<#macro FunctionName><@NakedFunctionName /><@f.GenericArgs typeIndex arity /></#macro>
<#macro SerializableFunctionName><@NakedFunctionName />.Serializable<@f.GenericArgs typeIndex arity /></#macro>

<#macro NakedClassName>${f.Prefix(typeIndex)}DefaultOnNullArgument${arity}</#macro>
<#macro ClassName><@NakedClassName /><@f.GenericArgs typeIndex arity /></#macro>

/**
 * A function class implementing <@SerializableFunctionName /> that returns ${f.defaultValues[typeIndex]} if any of
 * the function's inputs are null.
 */
class <@ClassName /> implements <@SerializableFunctionName />, Named {
  private static final long serialVersionUID = 1;
  private static final int CLASS_HASH = <@NakedClassName />.class.hashCode();
  private final <@FunctionName /> _wrapped;

  <@NakedClassName />(<@FunctionName /> wrapped) {
    // stacking this wrapper multiple times should be idempotent:
    if (wrapped instanceof <@NakedClassName />) {
      _wrapped = ((<@NakedClassName />) wrapped)._wrapped;
    } else{
      _wrapped = Objects.requireNonNull(wrapped);
    }
  }

  @Override
  public <@ClassName /> safelySerializable() {
    return new <@NakedClassName /><>(((<@SerializableFunctionName />)_wrapped).safelySerializable());
  }

  @Override
  public ${f.ReturnedPrimitiveName(typeIndex)} apply(<@c.InputValueList arity />) {
    if (<#list 1..arity as index>value${c.InputSuffix(index)} == null<#sep> || </#list>) {
      return<#if typeIndex != f.VoidFunctionIndex> ${f.defaultValues[typeIndex]}</#if>;
    }
    <#if typeIndex != f.VoidFunctionIndex>return </#if>_wrapped.apply(<#list 1..arity as index>value${c.InputSuffix(index)}<#sep>, </#list>);
  }

  @Override
  public int hashCode() {
    return CLASS_HASH + _wrapped.hashCode();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj instanceof <@NakedClassName />) {
      return this._wrapped.equals(((<@NakedClassName />) obj)._wrapped);
    }
    return false;
  }

  @Override
  public String toString() {
    return "arg == null ? ${f.defaultValues[typeIndex]} : " + Named.getName(_wrapped);
  }

  @Override
  public String getShortName() {
    return "arg == null ? ${f.defaultValues[typeIndex]} : " + Named.getShortName(_wrapped);
  }
}
