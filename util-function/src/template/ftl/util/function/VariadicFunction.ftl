<#import "../../common.ftl" as c />
<#import "common.ftl" as f />
<@c.AutoGeneratedWarning />
package com.linkedin.dagli.util.function;

import com.linkedin.dagli.util.exception.Exceptions;

<#-- the class name of the function interface we're going to define -->
<#macro GenericArgsUnclosed><A<#if typeIndex == f.ObjectFunctionIndex>, R</#if></#macro>
<#macro ClassName>${f.Prefix(typeIndex)}FunctionVariadic<@GenericArgsUnclosed />></#macro>

@FunctionalInterface
public interface <@ClassName /> extends FunctionBase {
  ${f.ReturnedPrimitiveName(typeIndex)} apply(A... args);

  <#-- some methods are added as a special case -->
  <#if (typeIndex == f.BooleanFunctionIndex)>
    default <@ClassName /> negate() {
      return BooleanNegatedFunctionVariadic.negate(this);
    }
  </#if>


  static <@GenericArgsUnclosed />> <@ClassName /> unchecked(Checked<@GenericArgsUnclosed />, ?> checkedFunction) {
    return (A... args) -> {
      try {
        <#if typeIndex != f.VoidFunctionIndex>return </#if>checkedFunction.apply(args);
      } catch (Throwable e) {
        throw Exceptions.asRuntimeException(e);
      }
    };
  }

  @FunctionalInterface
  interface Checked<@GenericArgsUnclosed />, X extends Throwable> extends FunctionBase {
    ${f.ReturnedPrimitiveName(typeIndex)} apply(A... args) throws X;
  }

  interface Serializable<@GenericArgsUnclosed />> extends <@ClassName />, java.io.Serializable {
    <#if (typeIndex == f.BooleanFunctionIndex)>
      @Override
      default Serializable<@GenericArgsUnclosed />> negate() {
        return BooleanNegatedFunctionVariadic.Serializable.negate(this);
      }
    </#if>
  }
}
