<#import "../../common.ftl" as c />
<#import "common.ftl" as f />
<@c.AutoGeneratedWarning />
package com.linkedin.dagli.util.function;

import java.util.Objects;
import com.linkedin.dagli.util.named.Named;

<#-- the class name of the function interface we're going to define -->
<#macro NakedFunctionName>${f.Prefix(typeIndex)}Function${arity}</#macro>

<#macro SerializableFunctionName><@NakedFunctionName />.Serializable<@f.GenericArgs typeIndex arity /></#macro>

<#macro NakedClassName>${f.Prefix(typeIndex)}ComposedFunction${arity}</#macro>
<#macro ClassName><@NakedClassName /><@f.GenericArgs typeIndex arity "Q" /></#macro>

<#macro FirstFunctionName serializable>Function${arity}<#if serializable>.Serializable</#if><<#if (arity > 0)><@c.InputGenericArguments arity />, </#if>Q></#macro>
<#macro SecondFunctionName serializable>${f.Prefix(typeIndex)}Function1<#if serializable>.Serializable</#if><? super Q<#if (typeIndex == 0)>, ? extends R</#if>></#macro>

/**
 * A function class implementing {@link <@NakedFunctionName />.Serializable} that composes
 * {@link <@NakedFunctionName />} with a {@link Function1}.  The function is only <strong>actually</strong> serializable
 * if its constituent composed functions are serializable, of course.
 */
class <@ClassName /> implements <@SerializableFunctionName />, Named {
  private static final long serialVersionUID = 1;

  private final <@FirstFunctionName false /> _first;
  private final <@SecondFunctionName false /> _andThen;

  /**
   * Creates a new instance that composes two functions, i.e. {@code andThen(first(inputs))}.
   *
   * @param first the first function to be called in the composition
   * @param andThen the second function to be called in the composition, accepting the {@code first} functions result
   *                as input
   */
  <@NakedClassName />(<@FirstFunctionName false /> first, <@SecondFunctionName false /> andThen) {
    _first = first;
    _andThen = andThen;
  }

  @Override
  @SuppressWarnings("unchecked")
  public <@ClassName /> safelySerializable() {
    return new <@NakedClassName /><>(((<@FirstFunctionName true />) _first).safelySerializable(), ((<@SecondFunctionName true />) _andThen).safelySerializable());
  }

  @Override
  public ${f.ReturnedPrimitiveName(typeIndex)} apply(<@c.InputValueList arity />) {
    <#if typeIndex != f.VoidFunctionIndex>return </#if>_andThen.apply(_first.apply(<#list 1..<(arity+1) as index>value${c.InputSuffix(index)}<#sep>, </#list>));
  }

  @Override
  public int hashCode() {
    return Objects.hash(<@NakedClassName />.class, _first, _andThen);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj instanceof <@NakedClassName />) {
      return this._first.equals(((<@NakedClassName />) obj)._first) && this._andThen.equals(((<@NakedClassName />) obj)._andThen);
    }
    return false;
  }

  @Override
  public String toString() {
    return Named.getShortName(_andThen) + "(" + Named.getShortName(_first) + ")";
  }

  @Override
  public String getShortName() {
    return Named.getShortName(_andThen) + "(...)";
  }
}
