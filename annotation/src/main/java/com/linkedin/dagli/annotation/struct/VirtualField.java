package com.linkedin.dagli.annotation.struct;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;


/**
 * Indicates that an instance method inside a @Struct class definition should be exposed as a transformer implemented as
 * an inner static class on the generated Struct, e.g. "StructName.TransformerName", in the same way such transformers
 * are automatically generated for @Struct fields.  This transformer will also be available via a convenience method
 * in the "StructName.Placeholder" class.
 *
 * This can be very convenient--for example, if your @Struct stores a list of samples and has a method getMean() to
 * calculate the mean, "StructName.Mean" can be generated as a transformer that will calculate the mean from an instance
 * of your @Struct within a Dagli graph.
 *
 * Methods annotated with @Transformer must not accept any parameters and must not accept any type parameters.  Further,
 * it must not declare any checked exceptions via the "throws" clause.  Finally, it must be visible to the generated
 * Struct class (i.e. not private and not both package-private and in a different package).
 *
 * This attribute takes an optional string parameter that specifies the name of the transformer (note that this must be
 * a valid class name and must not conflict with other inner classes generated by @Struct).  If no value is provided,
 * the name of the method is used (with the first letter of the method name capitalized).
 */
@Retention(RetentionPolicy.CLASS)
@Target({ElementType.METHOD})
public @interface VirtualField {
  /**
   * The name of the generated transformer.  If no name ("") is specified, the name of the method will be used.
   */
  String value() default "";
}
