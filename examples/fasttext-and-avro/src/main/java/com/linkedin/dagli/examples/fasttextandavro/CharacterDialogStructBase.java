package com.linkedin.dagli.examples.fasttextandavro;

import com.linkedin.dagli.annotation.struct.OptionalField;
import com.linkedin.dagli.annotation.struct.Struct;

/**
 * The {@link CharacterDialog} class is autogenerated from an Avro schema.  Since we can't modify the implementation of
 * CharacterDialog (it would be overwritten the next time the class is regenerated), we can't add a "@Struct(...)"
 * annotation to it directly as we normally would.  Instead, we define this class that <i>extends</i> it; from this,
 * Dagli will generate the @Struct class {@link CharacterDialogStruct} as desired using the fields defined by
 * {@link CharacterDialog}.
 *
 * Extending an Avro class this way makes it very easy to read Avro records.  Of course, we could also read the Avro
 * object directly as a {@link CharacterDialog} and then, e.g. use Dagli's AvroField transformer to pull out the fields
 * we want, but using a @Struct is easier (and more readable).
 *
 * Please see {@code /documentation/structs.md} for more information about @Structs.
 */
@OptionalField("character") // analogous to directly marking the field as @Optional; the field will not need to be
                            // explicitly assigned a value when constructing the @Struct
@Struct("CharacterDialogStruct") // the name of the @Struct class to generate
class CharacterDialogStructBase extends CharacterDialog {
  private static final long serialVersionUID = 1; // CharacterDialog is Externalizable (and thus Serializable)

  // Our constructor could be package-private, public, or protected here.  However, since we're extending an
  // Externalizable class, we may see a warning in our IDE if "public" is not used.
  public CharacterDialogStructBase() {
    character = ""; // character is an optional field; we'd like its default value to be an empty string
  }
}
