plugins {
  id "com.google.osdetector" version "1.6.2"
}

// The dependencies for DeepLearning4J require a platform classifier string:
def platform = osdetector.classifier
if (osdetector.os == "osx") {
  platform = "mac" + platform // need to adjust "osx-*" to "macosx-*"
}

dependencies {
  // DeepLearning4J (our neural network backend in this example) has a number of dependencies, which will vary depending
  // on whether you want to use your CPU, GPU, CPU with AVX2 instructions, etc.  Please see https://deeplearning4j.org/
  // for more information; here we use the most generic (and typically slowest) CPU-oriented dependencies.
  // If you are using Maven, note that your build setup will be much simpler: Gradle does not import transitive
  // dependencies from a JAR's pom.xml, which means we're forced to specify everything manually :(

  // ND4J is DeepLearning4J's linear algebra backend (this is the CPU edition):
  implementation project.ext.dependencies.nd4j
  // Needed by ND4J for OpenBLAS linear algebra on the CPU:
  implementation project.ext.dependencies.javacpp

  // explicitly importing the exact libraries needed by DL4J/ND4J for the platform seems to be necessary due to a
  // "feature" of Gradle that prevents it from importing transitive dependencies when directed by a JAR's pom.xml:
  implementation "org.bytedeco:javacpp:1.5.3:$platform"
  implementation "org.nd4j:nd4j-native:1.0.0-beta7:$platform"
  implementation "org.bytedeco:openblas:0.3.9-1.5.3:$platform"

  implementation project(':common')
  implementation project(':data')
  implementation project(':nn-dl4j')
  implementation project(':text')
  implementation project(':text-tokenization')

  // DL4J uses SLF4J, but Dagli uses Log4j2. log4j2-slf4j-impl provides a bridge between these such that DL4J's log
  // messages are passed to the Log4j2 API:
  implementation project.ext.dependencies.'log4j2-slf4j-impl'

  // Logging implementation that will allow Log4j2 to print everything onto the console
  implementation project.ext.dependencies.'log4j2-core'

  // without the annotation processor, we can't build our CharacterDialogStruct:
  annotationProcessor project(':annotation-processor')
  compileOnly project(':annotation-processor')
}