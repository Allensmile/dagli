<#import "common.ftl" as t />
<@t.AutoGeneratedWarning />
package com.linkedin.dagli.tuple;

import java.util.Iterator;


/**
 * Tuple generators create tuples of a fixed dimension from a variety of inputs.  Note that these methods are always
 * equivalent to the static methods available on the TupleX interfaces; the benefit of TupleGenerators is that they
 * provide an efficient way to generate many tuples of a given size when the tuple size is only known at runtime.
 *
 * You can get the generator for a specific size by calling Tuple.generator(size).
 */
final class TupleGenerators {
  private TupleGenerators() { }

  <#list 1..t.maxTupleSize as arity>
  private enum Generator${arity} implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return ${arity};
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple${arity}.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple${arity}.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple${arity}.fromIteratorUnsafe(elements);
    }
  }
  </#list>

  final static TupleGenerator[] GENERATORS = getGeneratorArray();

  private static TupleGenerator[] getGeneratorArray() {
    TupleGenerator[] result = new TupleGenerator[${t.maxTupleSize}];
    <#list 1..t.maxTupleSize as arity>
    result[${arity - 1}] = Generator${arity}.INSTANCE;
    </#list>
    return result;
  }
}
