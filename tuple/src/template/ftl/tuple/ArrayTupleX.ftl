<#import "common.ftl" as t />
<@t.AutoGeneratedWarning />
package com.linkedin.dagli.tuple;

import java.util.function.IntFunction;

/**
 * A tuple of arity ${arity} that is backed by an array.
 * ArrayTuples are less memory-efficient than FieldTuples because they require storing an extra object (the array),
 * but are trivially cheap to create from an existing array of tuple elements.
 */
final class <@t.ArrayTuple arity /> extends AbstractTuple implements <@t.Tuple arity /> {
  private static final long serialVersionUID = 1;
  private final Object[] _array;

  /**
   * Creates a new tuple whose elements are stored in the provided array.  Note that it is not possible for the
   * ArrayTuple to verify that the types of elements in the array satisfy the declared types of elements in the tuple;
   * the caller is responsible for ensuring this.
   *
   * The tuple takes ownership of the array, which should not be subsequently modified.
   */
  public ArrayTuple${arity}(Object[] array) {
    assert array.length == ${arity};
    _array = array;
  }

  <#list 0..<arity as index>
  @Override
  @SuppressWarnings("unchecked")
  public ${t.typeParameters[index]} get${index}() {
    return (${t.typeParameters[index]}) _array[${index}];
  }
  </#list>

  @Override
  public Object get(int index) {
    return _array[index];
  }

  @Override
  public int size() {
    return ${arity};
  }

  @Override
  public Object[] toArray() {
    return _array.clone();
  }

  @Override
  public <TT> TT[] toArray(IntFunction<TT[]> arrayGenerator) {
    TT[] result = arrayGenerator.apply(${arity});
    System.arraycopy(_array, 0, result, 0, ${arity});
    return result;
  }
}
