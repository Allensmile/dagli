// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the tuple/Tuple.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.tuple;

import java.io.Serializable;
import java.util.Iterator;
import java.util.function.IntFunction;


/**
 * An ordered sequence of elements.
 */
public interface Tuple extends Serializable, Iterable<Object>, Comparable<Tuple> {
  /**
   * Gets an element from the tuple.
   *
   * @throws IndexOutOfBoundsException if index < 0 or index >= size()
   * @param index the index of the element to fetch
   * @return the element value
   */
  Object get(int index);

  /**
   * @return the size (arity) of the tuple
   */
  int size();

  @Override
  @SuppressWarnings("unchecked")
  default int compareTo(Tuple o) {
    int minSize = Math.min(this.size(), o.size());
    for (int i = 0; i < minSize; i++) {
      int comparison = AbstractTuple.ELEMENT_COMPARATOR.compare((Comparable) this.get(i), (Comparable) o.get(i));
      if (comparison != 0) {
        return comparison;
      }
    }

    // if all elements (up to the length of the shortest tuple) are the same, the longest is the largest
    return Integer.compare(this.size(), o.size());
  }

  /**
   * Returns the elements of this tuple in a new array.
   *
   * @return an array with the elements of this tuple
   */
  default Object[] toArray() {
    return toArray(Object[]::new);
  }

  /**
   * Returns the elements of this tuple in an array generated by arrayGenerator.
   *
   * @param arrayGenerator a method that will generate an array of the passed size in which to place the elements
   * @return an array with the elements of this tuple
   */
  @SuppressWarnings("unchecked")
  default <TT> TT[] toArray(IntFunction<TT[]> arrayGenerator) {
    TT[] array = arrayGenerator.apply(size());
    for (int i = 0; i < size(); i++) {
      array[i] = (TT) get(i);
    }
    return array;
  }

  @Override
  default Iterator<Object> iterator() {
    return new Iterator<Object>() {
      private int _offset = 0;

      @Override
      public boolean hasNext() {
        return _offset < size();
      }

      @Override
      public Object next() {
        return get(_offset++);
      }
    };
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A> Tuple1<A> of(A element0) {
    return Tuple1.of(element0);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B> Tuple2<A, B> of(A element0, B element1) {
    return Tuple2.of(element0, element1);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C> Tuple3<A, B, C> of(A element0, B element1, C element2) {
    return Tuple3.of(element0, element1, element2);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D> Tuple4<A, B, C, D> of(A element0, B element1, C element2, D element3) {
    return Tuple4.of(element0, element1, element2, element3);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E> Tuple5<A, B, C, D, E> of(A element0, B element1, C element2, D element3, E element4) {
    return Tuple5.of(element0, element1, element2, element3, element4);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F> Tuple6<A, B, C, D, E, F> of(A element0, B element1, C element2, D element3, E element4,
      F element5) {
    return Tuple6.of(element0, element1, element2, element3, element4, element5);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G> Tuple7<A, B, C, D, E, F, G> of(A element0, B element1, C element2, D element3,
      E element4, F element5, G element6) {
    return Tuple7.of(element0, element1, element2, element3, element4, element5, element6);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H> Tuple8<A, B, C, D, E, F, G, H> of(A element0, B element1, C element2, D element3,
      E element4, F element5, G element6, H element7) {
    return Tuple8.of(element0, element1, element2, element3, element4, element5, element6, element7);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I> Tuple9<A, B, C, D, E, F, G, H, I> of(A element0, B element1, C element2,
      D element3, E element4, F element5, G element6, H element7, I element8) {
    return Tuple9.of(element0, element1, element2, element3, element4, element5, element6, element7, element8);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J> Tuple10<A, B, C, D, E, F, G, H, I, J> of(A element0, B element1, C element2,
      D element3, E element4, F element5, G element6, H element7, I element8, J element9) {
    return Tuple10.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K> Tuple11<A, B, C, D, E, F, G, H, I, J, K> of(A element0, B element1,
      C element2, D element3, E element4, F element5, G element6, H element7, I element8, J element9, K element10) {
    return Tuple11.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L> Tuple12<A, B, C, D, E, F, G, H, I, J, K, L> of(A element0, B element1,
      C element2, D element3, E element4, F element5, G element6, H element7, I element8, J element9, K element10,
      L element11) {
    return Tuple12.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L, M> Tuple13<A, B, C, D, E, F, G, H, I, J, K, L, M> of(A element0,
      B element1, C element2, D element3, E element4, F element5, G element6, H element7, I element8, J element9,
      K element10, L element11, M element12) {
    return Tuple13.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11, element12);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L, M, N> Tuple14<A, B, C, D, E, F, G, H, I, J, K, L, M, N> of(A element0,
      B element1, C element2, D element3, E element4, F element5, G element6, H element7, I element8, J element9,
      K element10, L element11, M element12, N element13) {
    return Tuple14.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11, element12, element13);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O> Tuple15<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O> of(
      A element0, B element1, C element2, D element3, E element4, F element5, G element6, H element7, I element8,
      J element9, K element10, L element11, M element12, N element13, O element14) {
    return Tuple15.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11, element12, element13, element14);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P> Tuple16<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P> of(
      A element0, B element1, C element2, D element3, E element4, F element5, G element6, H element7, I element8,
      J element9, K element10, L element11, M element12, N element13, O element14, P element15) {
    return Tuple16.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11, element12, element13, element14, element15);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q> Tuple17<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q> of(
      A element0, B element1, C element2, D element3, E element4, F element5, G element6, H element7, I element8,
      J element9, K element10, L element11, M element12, N element13, O element14, P element15, Q element16) {
    return Tuple17.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11, element12, element13, element14, element15, element16);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R> Tuple18<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R> of(
      A element0, B element1, C element2, D element3, E element4, F element5, G element6, H element7, I element8,
      J element9, K element10, L element11, M element12, N element13, O element14, P element15, Q element16, R element17) {
    return Tuple18.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11, element12, element13, element14, element15, element16, element17);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S> Tuple19<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S> of(
      A element0, B element1, C element2, D element3, E element4, F element5, G element6, H element7, I element8,
      J element9, K element10, L element11, M element12, N element13, O element14, P element15, Q element16,
      R element17, S element18) {
    return Tuple19.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11, element12, element13, element14, element15, element16, element17, element18);
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T> Tuple20<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T> of(
      A element0, B element1, C element2, D element3, E element4, F element5, G element6, H element7, I element8,
      J element9, K element10, L element11, M element12, N element13, O element14, P element15, Q element16,
      R element17, S element18, T element19) {
    return Tuple20.of(element0, element1, element2, element3, element4, element5, element6, element7, element8,
        element9, element10, element11, element12, element13, element14, element15, element16, element17, element18,
        element19);
  }

  /**
   * Returns a TupleGenerator for the specified tuple size.  Size must be between 1 and the largest defined tuple size.
   *
   * @param size the size of tuple the returned TupleGenerator will generate
   * @throws ArrayIndexOutOfBoundsException if size <= 0 or size exceeds the largest defined tuple size.
   * @return a TupleGenerator for the specified tuple size.
   */
  static TupleGenerator generator(int size) {
    return TupleGenerators.GENERATORS[size - 1];
  }
}
