// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the tuple/TupleX.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.tuple;

import java.util.Iterator;


/**
 * An ordered sequence of 1 elements.
 */
public interface Tuple1<A> extends Tuple, TupleValue0<A> {
  /**
   * Gets element 0 from the tuple
   *
   * @return the element value
   */
  @Override
  A get0();

  /**
   * Gets a new tuple containing the same elements as this tuple except for element 0, which will be set to the
    provided value.
   *
   * @param value the value that should replace element 0 in the new tuple
   * @return a new tuple with the same elements as this one, but with element 0 replaced with a new value
   */
  default <Z> Tuple1<Z> withValue0(Z value) {
    return of(value);
  }

  /**
   * @return 1
   */
  @Override
  default int size() {
    return 1;
  }

  /**
   * Creates a new tuple that contains the given elements.
   *
   * @return a new tuple with the provided elements
   */
  static <A> Tuple1<A> of(A element0) {
    return new FieldTuple1<>(element0);
  }

  /**
   * Creates a new tuple that contains the given elements.  The tuple takes ownership of the provided array, which
   * should not be subsequently modified.  The array's length must be at least 1.
   *
   * This method is "unsafe" because the arrays values cannot be type-checked to ensure that they conform to their
   * purported types.
   *
   * @return a new tuple with the provided elements
   */
  static <A> Tuple1<A> fromArrayUnsafe(Object[] elements) {
    return new ArrayTuple1<>(elements);
  }

  /**
   * Creates a new tuple containing the first 1 elements of the provided iterable.
   *
   * This method is "unsafe" because the iterated values cannot be type-checked to ensure that they conform to their
   * purported types.
   *
   * @param elements the iterable containing the elements to copy into a new tuple.
   * @throws java.util.NoSuchElementException if there are fewer than 1 elements in the provided iterable.
   * @return a new tuple with the provided elements
   */
  static <A> Tuple1<A> fromIterableUnsafe(Iterable<?> elements) {
    Iterator<?> iterator = elements.iterator();
    if (iterator instanceof AutoCloseable) {
      try (AutoCloseable closeable = (AutoCloseable) iterator) {
        return fromIteratorUnsafe(iterator);
      } catch (RuntimeException e) {
        throw e; // rethrow unmodified
      } catch (Exception e) {
        // checked exceptions might be thrown when closing the iterator
        throw new RuntimeException(e);
      }
    }

    return fromIteratorUnsafe(elements.iterator());
  }

  /**
   * Creates a new tuple containing the first 1 elements of the provided iterator.
   *
   * This method is "unsafe" because the iterated values cannot be type-checked to ensure that they conform to their
   * purported types.
   *
   * @param elements the iterator containing the elements to copy into a new tuple.
   * @throws java.util.NoSuchElementException if there are fewer than 1 elements in the provided iterator.
   * @return a new tuple with the provided elements
   */
  @SuppressWarnings("unchecked")
  static <A> Tuple1<A> fromIteratorUnsafe(Iterator<?> elements) {
    return new FieldTuple1<A>((A) elements.next());
  }
}
