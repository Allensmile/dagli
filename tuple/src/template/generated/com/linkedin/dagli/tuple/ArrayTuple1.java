// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the tuple/ArrayTupleX.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.tuple;

import java.util.function.IntFunction;


/**
 * A tuple of arity ArrayTuple1<A> that is backed by an array.
 * ArrayTuples are less memory-efficient than FieldTuples because they require storing an extra object (the array),
 * but are trivially cheap to create from an existing array of tuple elements.
 */
final class ArrayTuple1<A> extends AbstractTuple implements Tuple1<A> {
  private static final long serialVersionUID = 1;
  private final Object[] _array;

  /**
   * Creates a new tuple whose elements are stored in the provided array.  Note that it is not possible for the
   * ArrayTuple to verify that the types of elements in the array satisfy the declared types of elements in the tuple;
   * the caller is responsible for ensuring this.
   *
   * The tuple takes ownership of the array, which should not be subsequently modified.
   */
  public ArrayTuple1(Object[] array) {
    assert array.length == 1;
    _array = array;
  }

  @Override
  @SuppressWarnings("unchecked")
  public A get0() {
    return (A) _array[0];
  }

  @Override
  public Object get(int index) {
    return _array[index];
  }

  @Override
  public int size() {
    return 1;
  }

  @Override
  public Object[] toArray() {
    return _array.clone();
  }

  @Override
  public <TT> TT[] toArray(IntFunction<TT[]> arrayGenerator) {
    TT[] result = arrayGenerator.apply(1);
    System.arraycopy(_array, 0, result, 0, 1);
    return result;
  }
}
