// AUTOGENERATED CODE.  DO NOT MODIFY DIRECTLY!  Instead, please modify the tuple/TupleGenerators.ftl file.
// See the README in the module's src/template directory for details.
package com.linkedin.dagli.tuple;

import java.util.Iterator;


/**
 * Tuple generators create tuples of a fixed dimension from a variety of inputs.  Note that these methods are always
 * equivalent to the static methods available on the TupleX interfaces; the benefit of TupleGenerators is that they
 * provide an efficient way to generate many tuples of a given size when the tuple size is only known at runtime.
 *
 * You can get the generator for a specific size by calling Tuple.generator(size).
 */
final class TupleGenerators {
  private TupleGenerators() {
  }

  private enum Generator1 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 1;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple1.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple1.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple1.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator2 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 2;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple2.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple2.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple2.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator3 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 3;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple3.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple3.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple3.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator4 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 4;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple4.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple4.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple4.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator5 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 5;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple5.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple5.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple5.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator6 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 6;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple6.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple6.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple6.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator7 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 7;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple7.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple7.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple7.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator8 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 8;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple8.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple8.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple8.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator9 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 9;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple9.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple9.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple9.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator10 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 10;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple10.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple10.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple10.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator11 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 11;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple11.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple11.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple11.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator12 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 12;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple12.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple12.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple12.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator13 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 13;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple13.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple13.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple13.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator14 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 14;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple14.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple14.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple14.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator15 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 15;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple15.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple15.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple15.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator16 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 16;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple16.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple16.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple16.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator17 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 17;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple17.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple17.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple17.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator18 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 18;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple18.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple18.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple18.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator19 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 19;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple19.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple19.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple19.fromIteratorUnsafe(elements);
    }
  }

  private enum Generator20 implements TupleGenerator {
    INSTANCE;

    @Override
    public int size() {
      return 20;
    }

    @Override
    public Tuple fromArray(Object[] elements) {
      return Tuple20.fromArrayUnsafe(elements);
    }

    @Override
    public Tuple fromIterable(Iterable<?> elements) {
      return Tuple20.fromIterableUnsafe(elements);
    }

    @Override
    public Tuple fromIterator(Iterator<?> elements) {
      return Tuple20.fromIteratorUnsafe(elements);
    }
  }

  final static TupleGenerator[] GENERATORS = getGeneratorArray();

  private static TupleGenerator[] getGeneratorArray() {
    TupleGenerator[] result = new TupleGenerator[20];
    result[0] = Generator1.INSTANCE;
    result[1] = Generator2.INSTANCE;
    result[2] = Generator3.INSTANCE;
    result[3] = Generator4.INSTANCE;
    result[4] = Generator5.INSTANCE;
    result[5] = Generator6.INSTANCE;
    result[6] = Generator7.INSTANCE;
    result[7] = Generator8.INSTANCE;
    result[8] = Generator9.INSTANCE;
    result[9] = Generator10.INSTANCE;
    result[10] = Generator11.INSTANCE;
    result[11] = Generator12.INSTANCE;
    result[12] = Generator13.INSTANCE;
    result[13] = Generator14.INSTANCE;
    result[14] = Generator15.INSTANCE;
    result[15] = Generator16.INSTANCE;
    result[16] = Generator17.INSTANCE;
    result[17] = Generator18.INSTANCE;
    result[18] = Generator19.INSTANCE;
    result[19] = Generator20.INSTANCE;
    return result;
  }
}
